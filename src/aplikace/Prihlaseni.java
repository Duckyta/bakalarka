/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplikace;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Duckyta
 */
public class Prihlaseni extends javax.swing.JFrame {

    /**
     * Tato třída obstarává přihlášení uživatelů k databázovému systému (DS)
     */
    public String uzivatel, heslo, port, databaze, instance, server;
    /*promenne pro vytvareni Connection URL*/
    public Connection conn = null;
    /*promenna obsluhujici pripojeni k danému DS*/
    public int volba;
    /*proměnná obsahujici volbu DS z HlavniOkno*/
    public Prihlaseni pr;
    public String postgreServer = null;
    /*pomocne promenne pro prepojovani u PostgreSQL*/
    public String postgreUziv = null;
    public String postgreHesl = null;
    public String postgrePort = null;
    public String postgreDatabaze = null;

    String jmPom = null, hesloPom = null, portPom = null, serverPom = null;

    /*pomocne promenne pro prepojovani u PostgreSQL*/
    public Prihlaseni() {
        initComponents();
        this.setTitle("Prihlaseni do databaze.");
        this.setLocationRelativeTo(null);
    }

    /* navraci login */
    public String getUzivatel() {
        return txtFldUser.getText();
    }

    /* navraci heslo */
    public String getHeslo() {
        String heslo = jPasswordField.getText();
        return heslo;
    }

    /* navraci cislo portu */
    public String getPort() {
        return txtFldPort.getText();
    }

    /* navraci vybranou databazi */
    public String getDatabaze() {
        return txtFldDatabase.getText();
    }

    /*navraci instanci pro pripojeni k Oracle Database*/
    public String getInstance() {
        return txtFldInstance.getText();
    }

    /*navraci prislusny server*/
    public String getServer() {
        return txtFldServer.getText();
    }

    /*navraci volbu daneho DS*/
    public int getVolba() {
        return volba;
    }

    /*obsluhuje predavani daneho pripojeni k DS*/
    public Connection getConnection() throws SQLException {
        if (conn == null) {
            throw new SQLException("Session is not established");
        }
        return conn;
    }

    /*uzavira spojeni s DS*/
    public void closeConnection() throws SQLException {
        HlavniOkno h1 = new HlavniOkno();
        if (conn != null) {
            if (volba == 1 || volba == 2) {
                conn.commit();
            }
            conn.close();
            conn = null;
            JOptionPane.showMessageDialog(h1, "Odhlášení proběhlo v pořádku.", "Stav odhlášení", 1);
        }
    }

    /*pomocna metody pro skryti textovych poli nepotrebnych pro prihlaseni*/
    public void hideDatabase() {
        txtFldDatabase.setVisible(false);
        jLabel5.setVisible(false);
    }

    public void hideInstance() {
        txtFldInstance.setVisible(false);
        jLabel6.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFldUser = new javax.swing.JTextField();
        txtFldPort = new javax.swing.JTextField();
        txtFldServer = new javax.swing.JTextField();
        txtFldDatabase = new javax.swing.JTextField();
        txtFldInstance = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnPripojit = new javax.swing.JButton();
        jPasswordField = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(0, 0));

        jLabel1.setText("Uživatel:");

        jLabel2.setText("Heslo:");

        jLabel3.setText("Port:");

        jLabel4.setText("Server:");

        jLabel5.setText("Databáze:");

        jLabel6.setText("Instance:");

        txtFldUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldUserActionPerformed(evt);
            }
        });

        jLabel7.setText("Při nevyplnění portu - automaticky vyplněn jako defaultní pro daný server");

        btnPripojit.setText("Připojit");
        btnPripojit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPripojitActionPerformed(evt);
            }
        });

        jLabel8.setText("Při nevyplnění serveru - automaticky localhost");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFldInstance)
                            .addComponent(txtFldDatabase)
                            .addComponent(txtFldPort)
                            .addComponent(txtFldUser)
                            .addComponent(txtFldServer)
                            .addComponent(jPasswordField)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 37, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(btnPripojit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFldUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtFldServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtFldDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtFldInstance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPripojit)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*metoda obsatavajici prihlaseni - sbira potrebna data potrebna pro vytvoreni Connection URL*/
    private void btnPripojitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPripojitActionPerformed
        HlavniOkno h1 = new HlavniOkno();
        switch (volba) {
            // Oracle Database
            case 0: {
                try {
                    Class.forName("oracle.jdbc.driver.OracleDriver");
                    String url = "jdbc:oracle:thin:";
                    uzivatel = getUzivatel();
                    heslo = getHeslo();
                    port = getPort();
                    server = getServer();
                    instance = getInstance();

                    if (server.length() == 0) {
                        server = "localhost";
                    }
                    if (port.length() == 0) {
                        port = "1521";
                    }

                    url += uzivatel;
                    url += "/";
                    url += heslo;
                    url += "@";
                    url += server;
                    url += ":";
                    url += port;
                    url += ":";
                    url += instance;
                    conn = DriverManager.getConnection(url);
                    JOptionPane.showMessageDialog(h1, "Úspěšné připojení.", "Stav přihlášení", 1);
                    this.setVisible(false);
                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(h1, "Nebyly zadány správné příhlašovací údaje.", "Stav přihlášení", 1);
                    Logger.getLogger(HlavniOkno.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            // SQL Server 2016
            case 1: {
                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    String url = "jdbc:sqlserver://";
                    uzivatel = getUzivatel();
                    int volba2 = 0;
                    heslo = getHeslo();
                    port = getPort();
                    server = getServer();
                    databaze = getDatabaze();
                    if (server.length() == 0) {
                        server = "localhost";
                        volba = 1;
                    }
                    if (port.length() == 0) {
                        port = "1433";
                    }
                    if (volba2 == 1) {
                        url += server;
                        url += ";integratedSecurity=true;";
                        conn = DriverManager.getConnection(url, uzivatel, heslo);
                    } else {
                        url += server;
                        url += ":";
                        url += port;
                        url += ";";
                        conn = DriverManager.getConnection(url, uzivatel, heslo);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(Prihlaseni.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.setVisible(false);
            JOptionPane.showMessageDialog(h1, "Úspěšné připojení.", "Stav připojení", 1);
            break;
//mysql
            case 2: {
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    String url = "jdbc:mysql://";
                    uzivatel = getUzivatel();
                    heslo = getHeslo();
                    server = getServer();
                    port = getPort();

                    if (server.length() == 0) {
                        server = "localhost";
                    }
                    if (port.length() == 0) {
                        port = "3306";
                    }

                    url += server;
                    url += "/";
                    url += "?user=";
                    url += uzivatel;
                    url += "&password=";
                    url += heslo;
                    conn = DriverManager.getConnection(url);
                    JOptionPane.showMessageDialog(h1, "Úspěšné připojení.", "Stav připojení", 1);
                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(h1, "Neúspěšné připojení.", "Stav připojení", 1);
                    Logger.getLogger(Prihlaseni.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.setVisible(false);
            break;
//postgresql
            case 3: {
                try {
                    Class.forName("org.postgresql.Driver");
                    String url = "jdbc:postgresql://";
                    server = getServer();
                    if (server.length() == 0) {
                        server = "localhost";
                    }
                    port = getPort();
                    if (port.length() == 0) {
                        port = "5432";
                    }
                    databaze = getDatabaze();
                    uzivatel = getUzivatel();
                    heslo = getHeslo();
                    url += server;
                    url += ":";
                    url += port;
                    url += "/";
                    url += databaze;
                    conn = DriverManager.getConnection(url, uzivatel, heslo);
                    kody.metodyOstatni.vytvorDatabazi(conn);
                    postgreDatabaze = databaze;
                    postgreServer = server;
                    postgrePort = port;
                    postgreUziv = uzivatel;
                    postgreHesl = heslo;
                    conn.close();
                    url = "jdbc:postgresql://";
                    url += server;
                    url += ":";
                    url += port;
                    url += "/";
                    databaze = "testovaciprostredi";
                    url += databaze;
                    conn = DriverManager.getConnection(url, uzivatel, heslo);
                } catch (SQLException ex) {
                    Logger.getLogger(HlavniOkno.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Prihlaseni.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.setVisible(false);
                JOptionPane.showMessageDialog(h1, "Úspěšné připojení.", "Stav připojení", 1);
                break;
            }
        }
    }//GEN-LAST:event_btnPripojitActionPerformed

    private void txtFldUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldUserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPripojit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JTextField txtFldDatabase;
    private javax.swing.JTextField txtFldInstance;
    private javax.swing.JTextField txtFldPort;
    private javax.swing.JTextField txtFldServer;
    private javax.swing.JTextField txtFldUser;
    // End of variables declaration//GEN-END:variables
}
